//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/NewControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewControls"",
    ""maps"": [
        {
            ""name"": ""Driving"",
            ""id"": ""97dc57de-36e0-429b-a5e8-244160ca4b2d"",
            ""actions"": [
                {
                    ""name"": ""Front"",
                    ""type"": ""Button"",
                    ""id"": ""f7065587-b192-4721-8b53-a49c8c48e7f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""4fec632a-f494-4ee5-a072-57021f990818"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""Button"",
                    ""id"": ""5cb58bba-37b2-4491-94de-cf40bfa0e136"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""Button"",
                    ""id"": ""29230c95-c1cf-4690-a18b-8101b3e1696d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b6ce0fe-0741-4c08-9b51-4c99f63c1671"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Front"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a95608a2-a10f-41bb-929c-5d0373fabdb2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3701a9a4-3741-4d1b-83ce-45634b1e9d40"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c94b0b8-8580-4b41-836d-8a2a33fa2fce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pausing"",
            ""id"": ""6e5e9f28-4c74-4ce4-9be4-6cf5906b124b"",
            ""actions"": [
                {
                    ""name"": ""Act"",
                    ""type"": ""Button"",
                    ""id"": ""7ff86eaf-5b1e-4656-b0df-bccc6fa7b415"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e59d8dc4-e13f-4f8b-9204-e36f5b8c9c66"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Act"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Driving
        m_Driving = asset.FindActionMap("Driving", throwIfNotFound: true);
        m_Driving_Front = m_Driving.FindAction("Front", throwIfNotFound: true);
        m_Driving_Back = m_Driving.FindAction("Back", throwIfNotFound: true);
        m_Driving_TurnRight = m_Driving.FindAction("TurnRight", throwIfNotFound: true);
        m_Driving_TurnLeft = m_Driving.FindAction("TurnLeft", throwIfNotFound: true);
        // Pausing
        m_Pausing = asset.FindActionMap("Pausing", throwIfNotFound: true);
        m_Pausing_Act = m_Pausing.FindAction("Act", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Driving
    private readonly InputActionMap m_Driving;
    private List<IDrivingActions> m_DrivingActionsCallbackInterfaces = new List<IDrivingActions>();
    private readonly InputAction m_Driving_Front;
    private readonly InputAction m_Driving_Back;
    private readonly InputAction m_Driving_TurnRight;
    private readonly InputAction m_Driving_TurnLeft;
    public struct DrivingActions
    {
        private @NewControls m_Wrapper;
        public DrivingActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Front => m_Wrapper.m_Driving_Front;
        public InputAction @Back => m_Wrapper.m_Driving_Back;
        public InputAction @TurnRight => m_Wrapper.m_Driving_TurnRight;
        public InputAction @TurnLeft => m_Wrapper.m_Driving_TurnLeft;
        public InputActionMap Get() { return m_Wrapper.m_Driving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingActions set) { return set.Get(); }
        public void AddCallbacks(IDrivingActions instance)
        {
            if (instance == null || m_Wrapper.m_DrivingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DrivingActionsCallbackInterfaces.Add(instance);
            @Front.started += instance.OnFront;
            @Front.performed += instance.OnFront;
            @Front.canceled += instance.OnFront;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @TurnRight.started += instance.OnTurnRight;
            @TurnRight.performed += instance.OnTurnRight;
            @TurnRight.canceled += instance.OnTurnRight;
            @TurnLeft.started += instance.OnTurnLeft;
            @TurnLeft.performed += instance.OnTurnLeft;
            @TurnLeft.canceled += instance.OnTurnLeft;
        }

        private void UnregisterCallbacks(IDrivingActions instance)
        {
            @Front.started -= instance.OnFront;
            @Front.performed -= instance.OnFront;
            @Front.canceled -= instance.OnFront;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @TurnRight.started -= instance.OnTurnRight;
            @TurnRight.performed -= instance.OnTurnRight;
            @TurnRight.canceled -= instance.OnTurnRight;
            @TurnLeft.started -= instance.OnTurnLeft;
            @TurnLeft.performed -= instance.OnTurnLeft;
            @TurnLeft.canceled -= instance.OnTurnLeft;
        }

        public void RemoveCallbacks(IDrivingActions instance)
        {
            if (m_Wrapper.m_DrivingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrivingActions instance)
        {
            foreach (var item in m_Wrapper.m_DrivingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DrivingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DrivingActions @Driving => new DrivingActions(this);

    // Pausing
    private readonly InputActionMap m_Pausing;
    private List<IPausingActions> m_PausingActionsCallbackInterfaces = new List<IPausingActions>();
    private readonly InputAction m_Pausing_Act;
    public struct PausingActions
    {
        private @NewControls m_Wrapper;
        public PausingActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Act => m_Wrapper.m_Pausing_Act;
        public InputActionMap Get() { return m_Wrapper.m_Pausing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PausingActions set) { return set.Get(); }
        public void AddCallbacks(IPausingActions instance)
        {
            if (instance == null || m_Wrapper.m_PausingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PausingActionsCallbackInterfaces.Add(instance);
            @Act.started += instance.OnAct;
            @Act.performed += instance.OnAct;
            @Act.canceled += instance.OnAct;
        }

        private void UnregisterCallbacks(IPausingActions instance)
        {
            @Act.started -= instance.OnAct;
            @Act.performed -= instance.OnAct;
            @Act.canceled -= instance.OnAct;
        }

        public void RemoveCallbacks(IPausingActions instance)
        {
            if (m_Wrapper.m_PausingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPausingActions instance)
        {
            foreach (var item in m_Wrapper.m_PausingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PausingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PausingActions @Pausing => new PausingActions(this);
    public interface IDrivingActions
    {
        void OnFront(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
        void OnTurnLeft(InputAction.CallbackContext context);
    }
    public interface IPausingActions
    {
        void OnAct(InputAction.CallbackContext context);
    }
}
